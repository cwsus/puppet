#!/usr/bin/env bash
#==============================================================================
#
#          FILE:  make-dns-keys.sh
#         USAGE:  ./make-dns-keys.sh
#   DESCRIPTION:  Generates DNS keys
#
#       OPTIONS:  ---
#  REQUIREMENTS:  ---
#          BUGS:  ---
#         NOTES:  ---
#        AUTHOR:  Kevin Huntly <kmhumtly@gmail.com>
#       COMPANY:
#       VERSION:  1.0
#       CREATED:  Fri, Mar 23, 2018 06:04:27 AM
#      REVISION:  0
#
#==============================================================================

typeset -i ERROR_COUNT=${ERROR_COUNT:=0};
typeset METHOD_NAME="${METHOD_NAME:=make-dns-keys}";
typeset KEYS_DIR="${KEYS_DIR:=/var/named/chroot/etc/keys.d}";
typeset KEY_CONFIG="/usr/local/etc/make-dns-keys.conf";

## debug logging for variables
[ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "ERROR_COUNT -> ${ERROR_COUNT}";
[ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "KEYS_DIR -> ${KEYS_DIR}";
[ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "KEY_CONFIG -> ${KEY_CONFIG}";

for ENTRY in $(<${KEY_CONFIG})
do
    [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "ENTRY -> ${ENTRY}";

    typeset KEYNAME="$(/usr/bin/env cut -d "|" -f 1 <<< "${ENTRY}")";
    typeset KEYALGO="$(/usr/bin/env cut -d "|" -f 2 <<< "${ENTRY}")";
    typeset KEYBITS="$(/usr/bin/env cut -d "|" -f 3 <<< "${ENTRY}")";

    [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "KEYNAME -> ${KEYNAME}";
    [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "KEYALGO -> ${KEYALGO}";
    [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "KEYBITS -> ${KEYBITS}";

    [ -f ${KEYS_DIR}/${KEYNAME}.key ] && continue;

    /usr/bin/env dnssec-keygen -a "${KEYALGO}" -b "${KEYBITS}" -n HOST -r /dev/urandom ${KEYNAME};
    typeset -i RET_CODE=${?};

    [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "ENTRY -> ${ENTRY}";

    [ -z "${RET_CODE}" -o ${RET_CODE} -eq 0 ] && continue; # error handle here

    typeset KEY=$(/usr/bin/env cat ${KEYNAME}.private* | /usr/bin/env grep Key | /usr/bin/env awk '{print $NF}')";

    [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "KEY -> ${KEY}";

    printf "# key generated using dnssec-keygen -a %s -b %s -n HOST %s\n" "${KEYALGO}" "${KEYBITS}" "${KEYNAME}" > ${KEYS_DIR}/${KEYTYPE}.key;
    printf "# keyfile %s generated by %s on %s\n" "${KEYNAME}" "${LOGNAME}" "$(/usr/bin/env date +"%D %H:%M:%S")" >> ${KEYS_DIR}/${KEYTYPE}.key;
    printf "key {\n" >> ${KEYS_DIR}/${KEYTYPE}.key;
    printf "    algorithm    %s.SIG-ALG.REG.INT\n" "${KEYALGO}" >> ${KEYS_DIR}/${KEYTYPE}.key
    printf "    secret       \"%s\"\n" "${KEY}" >> ${KEYS_DIR}/${KEYTYPE}.key
    printf "};\n" >> ${KEYS_DIR}/${KEYTYPE}.key

    [ ! -z "${KEY}" ] && unset -v KEY;
    [ ! -z "${KEYBITS}" ] && unset -v KEYBITS;
    [ ! -z "${KEYALGO}" ] && unset -v KEYALGO;
    [ ! -z "${KEYNAME}" ] && unset -v KEYNAME;
    [ ! -z "${ENTRY}" ] && unset -v ENTRY;
done

[ ! -z "${KEY}" ] && unset -v KEY;
[ ! -z "${KEYBITS}" ] && unset -v KEYBITS;
[ ! -z "${KEYALGO}" ] && unset -v KEYALGO;
[ ! -z "${KEYNAME}" ] && unset -v KEYNAME;
[ ! -z "${ENTRY}" ] && unset -v ENTRY;
[ ! -z "${KEYS_DIR}" ] && unset -v KEYS_DIR;
[ ! -z "${KEY_CONFIG}" ] && unset -v KEY_CONFIG;
[ ! -z "${ERROR_COUNT}" ] && unset -v ERROR_COUNT;

[ ! -z "${ENABLE_VERBOSE}" -a "${ENABLE_VERBOSE}" = "${_TRUE}" ] && set +x;
[ ! -z "${ENABLE_TRACE}" -a "${ENABLE_TRACE}" = "${_TRUE}" ] && set +v;

[ ! -z "${ENABLE_PERFORMANCE}" -a "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && typeset -i END_EPOCH=$(date +"%s");
[ ! -z "${ENABLE_PERFORMANCE}" -a "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && typeset -i RUNTIME=$(( START_EPOCH - END_EPOCH ));
[ ! -z "${ENABLE_PERFORMANCE}" -a "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && writeLogEntry "PERFORMANCE" "${METHOD_NAME}" "${0}" "${LINENO}" "${METHOD_NAME} TOTAL RUNTIME: $(( RUNTIME / 60 )) MINUTES, TOTAL ELAPSED: $(( RUNTIME % 60 )) SECONDS";
[ ! -z "${ENABLE_PERFORMANCE}" -a "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && writeLogEntry "PERFORMANCE" "${METHOD_NAME}" "${0}" "${LINENO}" "${METHOD_NAME} END: $(date +"${TIMESTAMP_OPTS}")";

## and return
exit ${ERROR_COUNT};


