#!/usr/bin/env bash
#==============================================================================
#
#          FILE:  make-dns-keys.sh
#         USAGE:  ./make-dns-keys.sh
#   DESCRIPTION:  Generates DNS keys
#
#       OPTIONS:  ---
#  REQUIREMENTS:  ---
#          BUGS:  ---
#         NOTES:  ---
#        AUTHOR:  Kevin Huntly <kmhumtly@gmail.com>
#       COMPANY:
#       VERSION:  1.0
#       CREATED:  Fri, Mar 23, 2018 06:04:27 AM
#      REVISION:  0
#
#==============================================================================

typeset -i ERROR_COUNT=${ERROR_COUNT:=0};
typeset METHOD_NAME="${METHOD_NAME:=make-dns-keys}";
typeset KEYS_DIR="${KEYS_DIR:=/var/named/chroot/etc/keys.d}";

## debug logging for variables
[ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "ERROR_COUNT -> ${ERROR_COUNT}";
[ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "KEYS_DIR -> ${KEYS_DIR}";

for KEYTYPE in <% @keys.each %>
do
    [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "KEYTYPE -> ${KEYTYPE}";

    [ -f ${KEYS_DIR}/${KEYTYPE}.key ] && continue;

    typeset KEYNAME=$(/usr/bin/env dnssec-keygen -a HMAC-MD5 -b 512 -n HOST -r /dev/urandom ${KEYTYPE});
    typeset KEY=$(/usr/bin/env cat ${KEYNAME}.private* | /usr/bin/env grep Key | /usr/bin/env awk '{print $NF}')";

    [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "KEYNAME -> ${KEYNAME}";
    [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${METHOD_NAME}" "${0}" "${LINENO}" "KEY -> ${KEY}";

    printf "# key generated using dnssec-keygen -a HMAC-MD5 -b 512 -n HOST %s\n "${KEYNAME}" > ${KEYS_DIR}/${KEYTYPE}.key
    printf "# keyfile %s generated by %s on %s\n" "${KEYNAME}" "${LOGNAME}" "$(/usr/bin/env date +"%D %H:%M:%S")" >> ${KEYS_DIR}/${KEYTYPE}.key
    printf "key {\n" >> ${KEYS_DIR}/${KEYTYPE}.key
    printf "    algorithm    HMAC-MD5.SIG-ALG.REG.INT\n"; >> ${KEYS_DIR}/${KEYTYPE}.key
    printf "    secret       \"%s\"\n"; >> ${KEYS_DIR}/${KEYTYPE}.key
    printf "};\n" >> ${KEYS_DIR}/${KEYTYPE}.key
done

[ ! -z "${RET_CODE}" ] && unset -v RET_CODE;
[ ! -z "${SERVER}" ] && unset -v SERVER;
[ ! -z "${OBJECT_ENTRY}" ] && unset -v OBJECT_ENTRY;
[ ! -z "${SUBNET_ADDR}" ] && unset -v SUBNET_ADDR;
[ ! -z "${SUBNET_ORG}" ] && unset -v SUBNET_ORG;
[ ! -z "${DHCP_SERVER}" ] && unset -v DHCP_SERVER;
[ ! -z "${IP_ADDRESS}" ] && unset -v IP_ADDRESS;
[ ! -z "${DHCP_SERVER}" ] && unset -v DHCP_SERVER;
[ ! -z "${ROOT_DIR}" ] && unset -v ROOT_DIR;
[ ! -z "${TMP_DIR}" ] && unset -v TMP_DIR;
[ ! -z "${FTP_CONFIG}" ] && unset -v FTP_CONFIG;
[ ! -z "${REPORTS_DIR}" ] && unset -v REPORTS_DIR;
[ ! -z "${FULL_TMP_OUTPUT_FILE}" ] && unset -v FULL_TMP_OUTPUT_FILE;
[ ! -z "${TMP_REPORT_FILE}" ] && unset -v TMP_REPORT_FILE;
[ ! -z "${TMP_SUBNET_ORGS}" ] && unset -v TMP_SUBNET_ORGS;
[ ! -z "${QIP_ORGANIZATION}" ] && unset -v QIP_ORGANIZATION;
[ ! -z "${QIP_USERNAME}" ] && unset -v QIP_USERNAME;
[ ! -z "${#REPORT_SERVERS[@]}" ] && unset -v REPORT_SERVERS;
[ ! -z "${#REPORT_HEADERS[@]}" ] && unset -v REPORT_HEADERS;
[ ! -z "${DHCP_SERVERS}" ] && unset -v DHCP_SERVERS;
[ ! -z "${CURR_IFS}" ] && unset -v CURR_IFS;
[ ! -z "${MODIFIED_IFS}" ] && unset -v MODIFIED_IFS;
[ ! -z "${ORG_NAME}" ] && unset -v ORG_NAME;
[ ! -z "${SUBNET_MASK}" ] && unset -v SUBNET_MASK;
[ ! -z "${SUBNET_NAME}" ] && unset -v SUBNET_NAME;

[ ! -z "${ENABLE_VERBOSE}" -a "${ENABLE_VERBOSE}" = "${_TRUE}" ] && set +x;
[ ! -z "${ENABLE_TRACE}" -a "${ENABLE_TRACE}" = "${_TRUE}" ] && set +v;

[ ! -z "${ENABLE_PERFORMANCE}" -a "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && typeset -i END_EPOCH=$(date +"%s");
[ ! -z "${ENABLE_PERFORMANCE}" -a "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && typeset -i RUNTIME=$(( START_EPOCH - END_EPOCH ));
[ ! -z "${ENABLE_PERFORMANCE}" -a "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && writeLogEntry "PERFORMANCE" "${METHOD_NAME}" "${0}" "${LINENO}" "${METHOD_NAME} TOTAL RUNTIME: $(( RUNTIME / 60 )) MINUTES, TOTAL ELAPSED: $(( RUNTIME % 60 )) SECONDS";
[ ! -z "${ENABLE_PERFORMANCE}" -a "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && writeLogEntry "PERFORMANCE" "${METHOD_NAME}" "${0}" "${LINENO}" "${METHOD_NAME} END: $(date +"${TIMESTAMP_OPTS}")";

## and return
exit ${ERROR_COUNT};

